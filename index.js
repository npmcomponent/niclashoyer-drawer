// Generated by CoffeeScript 1.6.2
(function() {
  var Drawer, addDrawerStyles, css;

  css = require('component-css');

  addDrawerStyles = function(drawer, direction) {
    var styles;

    styles = {};
    switch (direction) {
      case 'left':
        styles.left = 0;
        styles.right = 'auto';
        break;
      case 'right':
        styles.right = 0;
        styles.left = 'auto';
        break;
      case 'top':
        styles.top = 0;
        styles.bottom = 'auto';
        break;
      case 'bottom':
        styles.bottom = 0;
        styles.top = 'auto';
    }
    switch (direction) {
      case 'left':
      case 'right':
        styles.height = '100%';
        styles.maxHeight = 'none';
        styles.minHeight = 'none';
        break;
      case 'top':
      case 'bottom':
        styles.width = '100%';
        styles.maxWidth = 'none';
        styles.minWidth = 'none';
    }
    return css(drawer, styles);
  };

  Drawer = (function() {
    function Drawer(root, direction) {
      var first, second,
        _this = this;

      this.root = root;
      if (direction == null) {
        direction = 'vertical';
      }
      if (direction === 'vertical') {
        first = 'left';
        second = 'right';
        this.drawerProps = {
          size: 'width',
          change: 'left'
        };
      } else {
        first = 'top';
        second = 'bottom';
        this.drawerProps = {
          size: 'height',
          change: 'top'
        };
      }
      this._findElements(first, second);
      if (this.drawer1 != null) {
        addDrawerStyles(this.drawer1, first);
      }
      if (this.drawer2 != null) {
        addDrawerStyles(this.drawer2, second);
      }
      this.active = null;
      addEventListener('resize', function() {
        return _this.update();
      });
    }

    Drawer.prototype._findElements = function(first, second) {
      this.drawers = this.root.querySelector('.drawers');
      this.drawer1 = this.drawers.querySelector('.' + first);
      this.drawer2 = this.drawers.querySelector('.' + second);
      return this.content = this.root.querySelector('.content');
    };

    Drawer.prototype._getDrawerStyle = function(drawer, prefix) {
      var styles;

      if (prefix == null) {
        prefix = '';
      }
      styles = {};
      styles[this.drawerProps.change] = prefix + getComputedStyle(drawer)[this.drawerProps.size];
      return styles;
    };

    Drawer.prototype._draw = function(first, second, prefix) {
      if (first != null) {
        css(this.content, this._getDrawerStyle(first, prefix));
        if (second != null) {
          second.classList.remove('active');
        }
        first.classList.add('active');
        this.active = first;
        return this;
      }
    };

    Drawer.prototype.drawFirst = function() {
      return this._draw(this.drawer1, this.drawer2);
    };

    Drawer.prototype.drawSecond = function() {
      return this._draw(this.drawer2, this.drawer1, '-');
    };

    Drawer.prototype.close = function() {
      var _ref, _ref1;

      css(this.content, {
        left: 0,
        top: 0
      });
      if ((_ref = this.drawer1) != null) {
        _ref.classList.remove('active');
      }
      if ((_ref1 = this.drawer2) != null) {
        _ref1.classList.remove('active');
      }
      this.active = null;
      return this;
    };

    Drawer.prototype._toggle = function(first, second, prefix) {
      if (this.active === first) {
        return this.close();
      } else {
        return this._draw(first, second, prefix);
      }
    };

    Drawer.prototype.toggleFirst = function() {
      return this._toggle(this.drawer1, this.drawer2);
    };

    Drawer.prototype.toggleSecond = function() {
      return this._toggle(this.drawer2, this.drawer1, '-');
    };

    Drawer.prototype.update = function() {
      if (this.active !== null) {
        if (this.active === this.drawer1) {
          return this.drawFirst();
        } else {
          return this.drawSecond();
        }
      }
    };

    Drawer.prototype.drawLeft = Drawer.prototype.drawFirst;

    Drawer.prototype.drawRight = Drawer.prototype.drawSecond;

    Drawer.prototype.drawTop = Drawer.prototype.drawFirst;

    Drawer.prototype.drawBottom = Drawer.prototype.drawSecond;

    Drawer.prototype.toggleLeft = Drawer.prototype.toggleFirst;

    Drawer.prototype.toggleRight = Drawer.prototype.toggleSecond;

    Drawer.prototype.toggleTop = Drawer.prototype.toggleFirst;

    Drawer.prototype.toggleBottom = Drawer.prototype.toggleSecond;

    return Drawer;

  })();

  module.exports = Drawer;

}).call(this);
